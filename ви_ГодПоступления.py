import tkinter as tk
from tkinter import ttk
import datetime
from logger import logger

class ВиджетГодПоступления(ttk.Frame):
    """
    Виджет для выбора года поступления курсанта.
    Включает кнопки навигации, поле ввода года и отображение текущего курса.
    """
    def __init__(self, родитель, **kwargs):
        """
        Инициализация виджета выбора года поступления
        
        Args:
            родитель: Родительский виджет
            **kwargs: Дополнительные параметры для ttk.Frame
        """
        super().__init__(родитель, **kwargs)
        
        # Получаем текущий год
        self.текущий_год = datetime.datetime.now().year
        self.выбранный_год = self.текущий_год
        
        # Создаем переменную для хранения значения года
        self.переменная_года = tk.StringVar(value=str(self.выбранный_год))
        
        # Создаем компоненты виджета
        self._создать_компоненты()
        
        # Обновляем отображение курса
        self._обновить_курс()
    
    def _создать_компоненты(self):
        """Создает компоненты виджета"""
        # Кнопка "Назад"
        self.кнопка_назад = ttk.Button(self, text="◀", width=2, command=self._уменьшить_год)
        self.кнопка_назад.pack(side="left", padx=(0, 5))
        
        # Поле ввода года
        self.поле_года = ttk.Entry(self, textvariable=self.переменная_года, width=6, justify="center")
        self.поле_года.pack(side="left")
        self.поле_года.bind("<Return>", self._проверить_ввод)
        self.поле_года.bind("<FocusOut>", self._проверить_ввод)
        
        # Кнопка "Вперед"
        self.кнопка_вперед = ttk.Button(self, text="▶", width=2, command=self._увеличить_год)
        self.кнопка_вперед.pack(side="left", padx=(5, 10))
        
        # Метка для отображения курса
        self.метка_курса = ttk.Label(self, text="")
        self.метка_курса.pack(side="left")
    
    def _уменьшить_год(self):
        """Уменьшает год на 1, но не ниже ограничения для 5 курса"""
        минимальный_год = self.текущий_год - 4  # Для 5 курса
        if self.выбранный_год > минимальный_год:
            self.выбранный_год -= 1
            self.переменная_года.set(str(self.выбранный_год))
            self._обновить_курс()
    
    def _увеличить_год(self):
        """Увеличивает год на 1, но не выше текущего года"""
        if self.выбранный_год < self.текущий_год:
            self.выбранный_год += 1
            self.переменная_года.set(str(self.выбранный_год))
            self._обновить_курс()
    
    def _проверить_ввод(self, event=None):
        """Проверяет введенное значение года и корректирует его при необходимости"""
        try:
            введенный_год = int(self.переменная_года.get())
            минимальный_год = self.текущий_год - 4  # Для 5 курса
            
            # Проверяем ограничения
            if введенный_год < минимальный_год:
                введенный_год = минимальный_год
            elif введенный_год > self.текущий_год:
                введенный_год = self.текущий_год
            
            self.выбранный_год = введенный_год
            self.переменная_года.set(str(self.выбранный_год))
            self._обновить_курс()
        except ValueError:
            # Если введено не число, возвращаем предыдущее значение
            self.переменная_года.set(str(self.выбранный_год))
    
    def _обновить_курс(self):
        """Обновляет отображение текущего курса"""
        try:
            from функции import расчет_курса
            курс = расчет_курса(self.выбранный_год)
            self.метка_курса.config(text=f"Курс: {курс}")
        except ImportError:
            # Если функция расчета курса недоступна, рассчитываем сами
            курс = self.текущий_год - self.выбранный_год + 1
            if курс < 1:
                курс = 1
            elif курс > 5:
                курс = 5
            self.метка_курса.config(text=f"Курс: {курс}")
        except Exception as e:
            logger.error(f"Ошибка при расчете курса: {e}")
            self.метка_курса.config(text="Курс: ?")
    
    def get(self):
        """Возвращает выбранный год поступления"""
        return self.выбранный_год
    
    def set(self, год):
        """Устанавливает год поступления"""
        try:
            год = int(год)
            минимальный_год = self.текущий_год - 4  # Для 5 курса
            
            # Проверяем ограничения
            if год < минимальный_год:
                год = минимальный_год
            elif год > self.текущий_год:
                год = self.текущий_год
            
            self.выбранный_год = год
            self.переменная_года.set(str(self.выбранный_год))
            self._обновить_курс()
            return True
        except ValueError:
            return False