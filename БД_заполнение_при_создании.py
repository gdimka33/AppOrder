from БД_соединение import выполнить_запрос
from logger import logger

# Описание структуры таблиц базы данных
TABLES = {
    'офицеры': '''
        CREATE TABLE IF NOT EXISTS офицеры (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            имя TEXT NOT NULL,
            фамилия TEXT NOT NULL,
            отчество TEXT,
            звание_id INTEGER,
            должность_id INTEGER,
            подразделение_id INTEGER,
            состояние_сод INTEGER DEFAULT 0,
            состояние_псод INTEGER DEFAULT 0,
            FOREIGN KEY (звание_id) REFERENCES звания (id),
            FOREIGN KEY (должность_id) REFERENCES должности (id),
            FOREIGN KEY (подразделение_id) REFERENCES подразделения (id)
        )
    ''',
    
    'курсанты': '''
        CREATE TABLE IF NOT EXISTS курсанты (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            имя TEXT NOT NULL,
            фамилия TEXT NOT NULL,
            отчество TEXT,
            звание_id INTEGER,
            должность_id INTEGER,
            подразделение_id INTEGER,
            год_набора INTEGER NOT NULL,
            состояние_сод INTEGER DEFAULT 0,
            состояние_псод INTEGER DEFAULT 0,
            FOREIGN KEY (звание_id) REFERENCES звания (id),
            FOREIGN KEY (должность_id) REFERENCES должности (id),
            FOREIGN KEY (подразделение_id) REFERENCES подразделения (id)
        )
    ''',
    
    'звания': '''
        CREATE TABLE IF NOT EXISTS звания (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            наименование TEXT NOT NULL,
            категория TEXT NOT NULL,
            CONSTRAINT check_категория CHECK (категория IN ('курсант', 'офицер', 'общее'))
        )
    ''',

    'должности': '''
        CREATE TABLE IF NOT EXISTS должности (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            наименование TEXT NOT NULL UNIQUE,
            категории TEXT NOT NULL CHECK (
                -- Проверяем что поле содержит валидный JSON
                json_valid(категории) AND 
                -- Проверяем что массив категорий не пустой
                json_array_length(категории) > 0
            )
        )
    ''',

    'подразделения': '''
        CREATE TABLE IF NOT EXISTS подразделения (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            наименование TEXT NOT NULL,
            абривиатура TEXT,
            тип_подразделения_id INTEGER,
            FOREIGN KEY (тип_подразделения_id) REFERENCES типы_подразделений (id)
        )
    ''',

    'типы_подразделений': '''
        CREATE TABLE IF NOT EXISTS типы_подразделений (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            наименование TEXT NOT NULL UNIQUE
        )
    ''',

    'иерархия_подразделений': '''
        CREATE TABLE IF NOT EXISTS иерархия_подразделений (
            родительское_подразделение_id INTEGER,
            дочернее_подразделение_id INTEGER,
            FOREIGN KEY (родительское_подразделение_id) REFERENCES подразделения (id),
            FOREIGN KEY (дочернее_подразделение_id) REFERENCES подразделения (id),
            PRIMARY KEY (родительское_подразделение_id, дочернее_подразделение_id)
        )
    ''',

    'история_перемещения_сотрудников': '''
        CREATE TABLE IF NOT EXISTS история_перемещения_сотрудников (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            сотрудник_id INTEGER NOT NULL,
            сотрудник_type TEXT NOT NULL,  -- 'офицер' или 'курсант'
            change_type TEXT NOT NULL,  -- 'звание' или 'должность'
            звание_id INTEGER,
            должность_id INTEGER,
            подразделение_id INTEGER,
            дата_начала DATE NOT NULL,
            дата_окончание DATE,
            FOREIGN KEY (звание_id) REFERENCES звания (id),
            FOREIGN KEY (должность_id) REFERENCES должности (id),
            FOREIGN KEY (подразделение_id) REFERENCES подразделения (id)
        )
    ''',
    'приказы': '''
        CREATE TABLE IF NOT EXISTS приказы (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            дата_создания DATE NOT NULL,
            дата_регистрации DATE,
            номер_регистрации TEXT,
            исполнитель_id INTEGER NOT NULL,
            руководитель_id INTEGER NOT NULL,
            название TEXT NOT NULL,
            основание TEXT NOT NULL,
            тип_приказа TEXT NOT NULL,
            список_лиц_согласования TEXT,
            FOREIGN KEY (исполнитель_id) REFERENCES офицеры (id),
            FOREIGN KEY (руководитель_id) REFERENCES офицеры (id)
        )
    ''',
    
    'список_нарядов_в_приказе': '''
        CREATE TABLE IF NOT EXISTS список_нарядов_в_приказе (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            начало_дата_время DATETIME NOT NULL,
            конец_дата_время DATETIME NOT NULL,
            приказ_id INTEGER NOT NULL,
            FOREIGN KEY (приказ_id) REFERENCES приказы (id)
        )
    ''',
    
    'назначения_в_наряд': '''
        CREATE TABLE IF NOT EXISTS назначения_в_наряд (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            список_нарядов_в_приказе_id INTEGER NOT NULL,
            офицер_id INTEGER,
            курсант_id INTEGER,
            тип_наряда_id INTEGER NOT NULL,
            пост_id INTEGER NOT NULL,
            начало_дата_время DATETIME NOT NULL,
            конец_дата_время DATETIME NOT NULL,
            FOREIGN KEY (список_нарядов_в_приказе_id) REFERENCES список_нарядов_в_приказе (id),
            FOREIGN KEY (офицер_id) REFERENCES офицеры (id),
            FOREIGN KEY (курсант_id) REFERENCES курсанты (id),
            FOREIGN KEY (тип_наряда_id) REFERENCES типы_нарядов (id),
            FOREIGN KEY (пост_id) REFERENCES посты (id),
            CHECK ((офицер_id IS NULL AND курсант_id IS NOT NULL) OR (офицер_id IS NOT NULL AND курсант_id IS NULL))
        )
    ''',
    
    'посты': '''
        CREATE TABLE IF NOT EXISTS посты (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            наименование TEXT NOT NULL,
            дежурный BOOLEAN NOT NULL DEFAULT 0,
            дежурный_кол INTEGER NOT NULL DEFAULT 0,
            дежурный_офицер BOOLEAN NOT NULL DEFAULT 0,
            дежурный_курсант BOOLEAN NOT NULL DEFAULT 0,
            дневальный BOOLEAN NOT NULL DEFAULT 0,
            дневальный_кол INTEGER NOT NULL DEFAULT 0
        )
    ''',
    
    'типы_нарядов': '''
        CREATE TABLE IF NOT EXISTS типы_нарядов (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            наименование TEXT NOT NULL
        )
    ''',
}

def проверка_создание_таблиц():
    """Проверяет существование необходимых таблиц в базе данных и создает отсутствующие"""
    try:
        # Сначала создаем справочные таблицы
        справочные_таблицы = {
            k: v for k, v in TABLES.items() 
            if k in ['типы_подразделений', 'звания', 'должности', 'подразделения', 'типы_нарядов']
        }
        for имя_таблицы, sql_запрос in справочные_таблицы.items():
            выполнить_запрос(sql_запрос)
            logger.info(f"Проверена/создана таблица {имя_таблицы}")
        
        # Затем создаем основные таблицы
        основные_таблицы = {k: v for k, v in TABLES.items() if k not in справочные_таблицы.keys()}
        for имя_таблицы, sql_запрос in основные_таблицы.items():
            выполнить_запрос(sql_запрос)
            logger.info(f"Проверена/создана таблица {имя_таблицы}")
        
        # Заполняем справочники начальными данными
        _заполнить_справочник_типов_подразделений()
        _заполнить_справочник_подразделений()
        _заполнить_справочник_званий()
        _заполнить_справочник_должностей()
        _заполнить_справочник_постов()
        _заполнить_справочник_типов_нарядов()
        
    except Exception as e:
        logger.error(f"Ошибка при проверке/создании таблиц: {e}")
        raise

def _заполнить_справочник_званий():
    """Заполняет справочник званий начальными данными"""
    звания = [
        # Звания для курсантов
        ('рядовой', 'курсант'),
        ('ефрейтор', 'курсант'),
        ('младший сержант', 'курсант'),
        ('сержант', 'курсант'),
        ('старший сержант', 'курсант'),
        ('старшина', 'курсант'),
        
        # Общие звания
        ('прапорщик', 'общее'),
        ('старший прапорщик', 'общее'),
        
        # Звания для офицеров
        ('младший лейтенант', 'офицер'),
        ('лейтенант', 'офицер'),
        ('старший лейтенант', 'офицер'),
        ('капитан', 'офицер'),
        ('майор', 'офицер'),
        ('подполковник', 'офицер'),
        ('полковник', 'офицер')
    ]
    
    try:
        # Очищаем таблицу перед заполнением
        выполнить_запрос("DELETE FROM звания")
        
        # Заполняем таблицу данными
        for звание, категория in звания:
            выполнить_запрос(
                "INSERT INTO звания (наименование, категория) VALUES (?, ?)",
                (звание.lower(), категория)
            )
        logger.info("Справочник званий успешно заполнен")
    except Exception as e:
        logger.error(f"Ошибка при заполнении справочника званий: {e}")
        raise

def _заполнить_справочник_должностей():
    """
    Заполняет справочник должностей начальными данными.
    Каждая должность может относиться к одной или нескольким категориям:
    - офицер: для аттестованных сотрудников
    - работник: для вольнонаемных работников
    - курсант: для переменного состава
    """
    должности = [
        # Руководящий состав (только офицеры)
        ('начальник института', '["офицер"]'),
        ('заместитель начальника института по учебной работе', '["офицер"]'),
        ('заместитель начальника института по служебно-боевой подготовке', '["офицер"]'),
        ('заместитель начальника института по тылу', '["офицер"]'),
        ('заместитель начальника института по кадрам', '["офицер"]'),
        ('начальник', '["офицер"]'),
        ('заместитель начальника', '["офицер"]'),

        
        # Преподавательский состав (офицеры и работники)
        ('профессор', '["офицер", "работник"]'),
        ('доцент', '["офицер", "работник"]'),
        ('старший преподаватель', '["офицер", "работник"]'),
        ('преподаватель', '["офицер", "работник"]'),
        ('старший преподаватель-методист', '["офицер", "работник"]'),
        ('преподаватель-методист', '["офицер", "работник"]'),
        ('начальник курса', '["офицер"]'),
        
        # Специальные должности (только офицеры)
        ('старший инспектор', '["офицер"]'),
        ('ученый секретарь', '["офицер"]'),
        ('инспектор', '["офицер"]'),
        ('младший инспектор', '["офицер"]'),
        ('старший оперативный дежурный', '["офицер"]'),
        ('контролер контрольно-пропускного пункта', '["офицер", "курсант"]'),
        ('заведующий складом вооружения', '["офицер"]'),
        ('комендант зданий', '["офицер"]'),
        ('дирижер оркестра', '["офицер"]'),
        ('заместитель начальника отдела – начальник отделения', '["офицер"]'),
        ('старший инженер', '["офицер"]'),
        ('инженер', '["офицер"]'),
        ('заведующий', '["офицер"]'),
        ('начальник кабинета', '["офицер"]'),
        ('старший преподаватель -методист', '["офицер"]'),
        
        # Медицинский персонал (офицеры и работники)
        ('врач-терапевт', '["офицер", "работник"]'),
        ('фельдшер', '["офицер", "работник"]'),
        ('медсестра', '["работник"]'),
        ('фармацевт', '["работник"]'),
        
        # Технический персонал (только работники)
        ('инженер-программист', '["работник"]'),
        ('техник', '["работник"]'),
        ('электромонтер', '["работник"]'),
        ('слесарь-ремонтник', '["работник"]'),
        ('столяр', '["работник"]'),
        ('маляр', '["работник"]'),
        ('повар', '["работник"]'),
        ('водитель', '["работник"]'),
        ('водитель-сотрудник', '["офицер"]'),
        
        # Административный персонал (работники)
        ('документовед', '["работник"]'),
        ('делопроизводитель', '["работник"]'),
        ('библиотекарь', '["работник"]'),
        ('библиограф', '["работник"]'),
        ('диспетчер', '["работник"]'),
        ('старший редактор', '["офицер"]'),
        ('редактор', '["офицер"]'),
        ('старший бухгалтер', '["офицер"]'),
        ('бухгалтер', '["офицер"]'),
        
        # Курсанты и командиры
        ('курсант', '["курсант"]'),
        ('командир отделения', '["курсант"]'),
        ('командир взвода', '["офицер"]'),
        
        # Специалисты (все категории)
        ('психолог', '["офицер", "работник"]'),
        ('специалист по учебно-методической работе', '["работник"]'),
        ('юрисконсульт', '["офицер", "работник"]'),
        ('научный сотрудник', '["офицер", "работник"]'),
        ('старший научный сотрудник', '["офицер", "работник"]'),
        ('старший психолог', '["офицер"]')
    ]
    
    try:
        # Проверяем, есть ли уже данные в таблице
        результат = выполнить_запрос("SELECT COUNT(*) as count FROM должности")
        if результат and результат[0]['count'] > 0:
            logger.info("Справочник должностей уже заполнен")
            return
            
        # Заполняем таблицу данными
        for наименование, категории in должности:
            выполнить_запрос(
                "INSERT INTO должности (наименование, категории) VALUES (?, ?)",
                (наименование.lower(), категории)
            )
        logger.info("Справочник должностей успешно заполнен")
    except Exception as e:
        logger.error(f"Ошибка при заполнении справочника должностей: {e}")
        raise

def _заполнить_справочник_типов_подразделений():
    """Заполняет справочник типов подразделений"""
    типы = [
        'Руководство',
        'Служба',
        'Совет',
        'Отделение',
        'Секретариат',
        'Отдел',
        'Группа',
        'Кафедра общеинститутская',
        'Кафедра факультетская',
        'Факультет',
        'Курс',
        'Центр',
        'Пресс-служба',
        'Библиотека',
        'Филиал'
    ]
    
    try:
        for тип in типы:
            выполнить_запрос(
                "INSERT OR IGNORE INTO типы_подразделений (наименование) VALUES (?)",
                (тип,)
            )
        logger.info("Справочник типов подразделений успешно заполнен")
    except Exception as e:
        logger.error(f"Ошибка при заполнении справочника типов подразделений: {e}")
        raise

def _добавить_подразделение(наименование, тип_подразделения, абривиатура=None):
    """
    Добавляет подразделение и возвращает его id
    Args:
        наименование (str): Наименование подразделения
        тип_подразделения (str): Тип подразделения
        абривиатура (str, optional): Аббревиатура подразделения
    Returns:
        int: ID добавленного подразделения
    """
    try:
        # Получаем id типа подразделения
        тип_results = выполнить_запрос(
            "SELECT id FROM типы_подразделений WHERE наименование = ?",
            (тип_подразделения,)
        )
        
        if not тип_results:
            raise ValueError(f"Тип подразделения '{тип_подразделения}' не найден")
            
        тип_id = тип_results[0]['id']  # Используем обращение по имени столбца
        
        # Проверяем, существует ли уже такое подразделение
        existing = выполнить_запрос(
            "SELECT id FROM подразделения WHERE наименование = ? AND тип_подразделения_id = ?",
            (наименование.lower(), тип_id)
        )
        
        if existing:
            return existing[0]['id']  # Используем обращение по имени столбца
        
        # Добавляем подразделение без оператора RETURNING
        выполнить_запрос(
            """INSERT INTO подразделения (наименование, абривиатура, тип_подразделения_id) 
               VALUES (?, ?, ?)""",
            (наименование.lower(), абривиатура, тип_id)
        )
        # Получаем ID только что добавленной записи
        result = выполнить_запрос("SELECT last_insert_rowid() as id")
        
        if not result:
            raise ValueError(f"Не удалось добавить подразделение '{наименование}'")
            
        return result[0]['id']  # Используем обращение по имени столбца
        
    except Exception as e:
        logger.error(f"Ошибка при добавлении подразделения {наименование}: {e}")
        raise

def _добавить_иерархию(родительское_id, дочернее_id):
    """Добавляет связь между подразделениями"""
    try:
        выполнить_запрос(
            """INSERT OR IGNORE INTO иерархия_подразделений 
               (родительское_подразделение_id, дочернее_подразделение_id) 
               VALUES (?, ?)""",
            (родительское_id, дочернее_id)
        )
    except Exception as e:
        logger.error(f"Ошибка при добавлении иерархии: {e}")
        raise

def _заполнить_справочник_подразделений():
    """Заполняет справочник подразделений с учетом иерархии"""
    try:
        # Руководство института
        руководство_id = _добавить_подразделение('Руководство института', 'Руководство', 'РИ')
        
        # Основные подразделения первого уровня
        оас_id = _добавить_подразделение('Организационно-аналитическая служба', 'Служба', 'ОАС')
        ученый_совет_id = _добавить_подразделение('Ученый совет', 'Совет', 'УС')
        юр_отделение_id = _добавить_подразделение('Юридическое отделение', 'Отделение', 'ЮО')
        _добавить_иерархию(руководство_id, оас_id)
        _добавить_иерархию(оас_id, ученый_совет_id)
        _добавить_иерархию(оас_id, юр_отделение_id)
        
        # Секретариат и его подчиненные
        секретариат_id = _добавить_подразделение('Секретариат', 'Секретариат', 'СЕК')
        архив_id = _добавить_подразделение('Архив', 'Отделение', 'АРХ')
        _добавить_иерархию(секретариат_id, архив_id)
        
        # Добавляем службы
        службы = [
            ('дежурная служба', 'ДС'),
            ('служба по организации мобилизационной подготовки и гражданской обороны', 'СОМП и ГО'),
            ('служба ведомственной пожарной охраны', 'СВПО'),
            ('служба связи', 'СС'),
            ('служба вооружения', 'СВ')
        ]
        
        for название, абр in службы:
            служба_id = _добавить_подразделение(название, 'Служба', абр)
            _добавить_иерархию(руководство_id, служба_id)

        # Продолжение в следующей части...

        # Общеинститутские кафедры
        общеинститутские_кафедры = [
            ('Кафедра боевой и тактико-специальной подготовки', 'БиТСП'),
            ('Кафедра гуманитарных и социально-экономических дисциплин', 'ГиСЭД'),
            ('Кафедра профессиональной языковой подготовки', 'ПЯП'),
            ('Кафедра психологии и педагогики профессиональной деятельности', 'ПиППД'),
            ('Кафедра специальной техники и информационных технологий', 'СТиИТ'),
        ]
        
        for название, абр in общеинститутские_кафедры:
            кафедра_id = _добавить_подразделение(название, 'Кафедра общеинститутская', абр)
            _добавить_иерархию(руководство_id, кафедра_id)

        # Юридический факультет
        юр_факультет_id = _добавить_подразделение('Юридический факультет', 'Факультет', 'ЮФ')
        _добавить_иерархию(руководство_id, юр_факультет_id)
        
        # Отделения юридического факультета
        ооо_юф_id = _добавить_подразделение('Отделение очного обучения юридического факультета', 'Отделение', 'ООО ЮФ')
        озо_юф_id = _добавить_подразделение('Отделение заочного обучения юридического факультета', 'Отделение', 'ОЗО ЮФ')
        _добавить_иерархию(юр_факультет_id, ооо_юф_id)
        _добавить_иерархию(юр_факультет_id, озо_юф_id)
        
        # Кафедры юридического факультета
        кафедры_юр = [
            ('Кафедра государственно-правовых дисциплин юридического факультета', 'ГПД'),
            ('Кафедра гражданско-правовых дисциплин юридического факультета', 'ГрПД'),
            ('Кафедра оперативно-розыскной деятельности юридического факультета', 'ОРД'),
            ('Кафедра организации режима и надзора юридического факультета', 'ОРН'),
            ('Кафедра уголовного права и криминологии юридического факультета', 'УПК'),
            ('Кафедра уголовно-процессуального права и криминалистики юридического факультета', 'УППК'),
            ('Кафедра уголовно-исполнительного права юридического факультета', 'УИП'),
            ('Кафедра управления и административно-правовых дисциплин юридического факультета', 'УАПД'),
            ('Кафедра организации деятельности оперативных аппаратов УИС и специальных мероприятий юридического факультета', 'ОДОА'),
            ('Кафедра физической подготовки юридического факультета', 'ФП'),
            ('кафедра административно-правовых дисциплин юридического факультета', 'АДПД'),
            ('кафедра гуманитарных и социально-экономических дисциплин юридического факультета', 'ГиСЭД'),
            ('кафедра огневой и тактико-специальной подготовки юридического факультета', 'ОиТСП'),
            ('кафедра организации деятельности оперативных аппаратов уголовно-исполнительной системы и специальных мероприятий юридического факультета', 'ОДОА'),
            ('кафедра специальной техники и информационных технологий юридического факультета', 'CТиИТ'),
            ('кафедра уголовно-исполнительного права и организации исполнения наказаний, не связанных с изоляцией осужденных от общества, юридического факультета', 'УИП и ОИНО'),
            ('кафедра юридической психологии, педагогики и организации воспитательной работы с осужденными юридического факультета', 'ЮПиПО')
        ]
        
        for название, абр in кафедры_юр:
            кафедра_id = _добавить_подразделение(название, 'Кафедра факультетская', абр)
            _добавить_иерархию(юр_факультет_id, кафедра_id)

        # Учебно-строевые подразделения
        усп_id = _добавить_подразделение('Учебно-строевые подразделения', 'Отдел', 'УСП')
        for i in range(1, 6):
            курс_id = _добавить_подразделение(f'{i}-й курс', 'Курс', f'К{i}')
            _добавить_иерархию(усп_id, курс_id)

        # Факультет ПО и ДПО
        фподпо_id = _добавить_подразделение('Факультет профессионального обучения и дополнительного профессионального образования', 'Факультет', 'ФПОДПО')
        _добавить_иерархию(руководство_id, фподпо_id)

        # Отдел кадров и его подразделения
        ок_id = _добавить_подразделение('Отдел кадров', 'Отдел', 'ОК')
        _добавить_иерархию(руководство_id, ок_id)
        
        окпс_id = _добавить_подразделение('Отделение комплектования постоянного состава', 'Отделение', 'ОКПС')
        окпс2_id = _добавить_подразделение('Отделение комплектования переменного состава', 'Отделение', 'ОКПС')
        _добавить_иерархию(ок_id, окпс_id)
        _добавить_иерархию(ок_id, окпс2_id)

        # Отдел воспитательной и социальной работы
        овср_id = _добавить_подразделение('Отдел воспитательной и социальной работы с личным составом', 'Отдел', 'ОВСР')
        _добавить_иерархию(руководство_id, овср_id)
        
        опо_id = _добавить_подразделение('Отделение психологического обеспечения', 'Отделение', 'ОПО')
        горпк_id = _добавить_подразделение('группа организации работы по противодействию коррупции и инспекции по личному составу', 'Группа', 'ГОРПК')
        клуб_id = _добавить_подразделение('Клуб', 'Отделение', 'КЛУБ')
        _добавить_иерархию(овср_id, опо_id)
        _добавить_иерархию(овср_id, горпк_id)
        _добавить_иерархию(овср_id, клуб_id)

        # Другие самостоятельные подразделения
        пресс_служба_id = _добавить_подразделение('Пресс-служба', 'Пресс-служба', 'ПС')
        библиотека_id = _добавить_подразделение('Библиотека', 'Библиотека', 'БИБ')
        _добавить_иерархию(руководство_id, пресс_служба_id)
        _добавить_иерархию(руководство_id, библиотека_id)

        # Научный центр
        нц_id = _добавить_подразделение('Научный центр', 'Центр', 'НЦ')
        _добавить_иерархию(руководство_id, нц_id)
        
        оно_id = _добавить_подразделение('Организационно-научное отделение', 'Отделение', 'ОНО')
        по_id = _добавить_подразделение('Полиграфическое отделение', 'Отделение', 'ПО')
        рио_id = _добавить_подразделение('Редакционно-издательский отдел', 'Отдел', 'РИО')
        _добавить_иерархию(нц_id, оно_id)
        _добавить_иерархию(нц_id, рио_id)
        _добавить_иерархию(нц_id, по_id)

        # финансово-экономический отдел
        фэо_id = _добавить_подразделение('финансово-экономический отдел', 'Отдел', 'ФЭО')
        _добавить_иерархию(руководство_id, фэо_id)
        
        опмоп_id = _добавить_подразделение('отделение планирования и методического обеспечения образовательного процесса', 'Отделение', 'ОПМЭП')
        _добавить_иерархию(руководство_id, опмоп_id)
        оумц_id = _добавить_подразделение('отделение по учету материальных ценностей', 'Отделение', 'ОУМЦ')
        _добавить_иерархию(фэо_id, оумц_id)

        # Учебный отдел
        уо_id = _добавить_подразделение('учебный отдел', 'Отдел', 'УО')
        _добавить_иерархию(руководство_id, уо_id)
        
        рс_id = _добавить_подразделение('расчетное отделение', 'Отделение', 'РС')
        _добавить_иерархию(уо_id, рс_id)

        # отдел менеджмента и контроля качества образовательного процесса
        омккоп_id = _добавить_подразделение('отдел менеджмента и контроля качества образовательного процесса', 'Отдел', 'ОМККОП')
        _добавить_иерархию(руководство_id, омккоп_id)

        # отдел по внедрению и использованию технических средств обучения
        овтсо_id = _добавить_подразделение('отдел по внедрению и использованию технических средств обучения', 'Отдел', 'ОВТСО')
        _добавить_иерархию(руководство_id, овтсо_id)

        # группа капитального строительства
        гкс_id = _добавить_подразделение('группа капитального строительства', 'Группа', 'ГКС')
        _добавить_иерархию(руководство_id, гкс_id)

        # Отдел тылового обеспечения
        ото_id = _добавить_подразделение('Отдел тылового обеспечения', 'Отдел', 'ОТО')
        _добавить_иерархию(руководство_id, ото_id)
        
        тыловые_подразделения = [
            ('Служба государственного оборонного заказа и государственных закупок', 'СГОЗ'),
            ('Квартирно-эксплуатационное отделение', 'КЭО'),
            ('Служба вещевого обеспечения', 'СВО'),
            ('Отделение продовольственного обеспечения', 'ОПО'),
            ('Отделение автомобильного транспорта', 'ОАТ')
        ]
        
        for название, абр in тыловые_подразделения:
            подр_id = _добавить_подразделение(название, 'Отделение', абр)
            _добавить_иерархию(ото_id, подр_id)

        # Факультет права и управления
        фпу_id = _добавить_подразделение('Факультет права и управления', 'Факультет', 'ФПУ')
        _добавить_иерархию(руководство_id, фпу_id)
        
        кафедры_фпу = [
            ('Кафедра теории и истории государства и права', 'ТИГП'),
            ('Кафедра публично-правовых дисциплин', 'ППД'),
            ('Кафедра частноправовых дисциплин', 'ЧПД'),
            ('Кафедра управления и информационных технологий', 'УИТ')
        ]
        
        for название, абр in кафедры_фпу:
            кафедра_id = _добавить_подразделение(название, 'Кафедра факультетская', абр)
            _добавить_иерархию(фпу_id, кафедра_id)

        # Отдел по защите государственной тайны
        озгт_id = _добавить_подразделение('Отдел по защите государственной тайны', 'Отдел', 'ОЗГТ')
        _добавить_иерархию(руководство_id, озгт_id)
        
        гтзи_id = _добавить_подразделение('Группа технической защиты информации', 'Группа', 'ГТЗИ')
        сб_id = _добавить_подразделение('Секретная библиотека', 'Библиотека', 'СБ')
        _добавить_иерархию(озгт_id, гтзи_id)
        _добавить_иерархию(озгт_id, сб_id)

        # Филиал МЧ-3
        _добавить_подразделение('Филиал МЧ-3 ФКУЗ МСЧ-33 ФСИН России', 'Филиал', 'МЧ-3')

        logger.info("Справочник подразделений успешно заполнен")
    except Exception as e:
        logger.error(f"Ошибка при заполнении справочника подразделений: {e}")
        raise

def _заполнить_справочник_постов():
    """Заполняет справочник постов начальными данными"""
    посты = [
        # наименование, дежурный, дежурный_кол, дежурный_офицер, дежурный_курсант, дневальный, дневальный_кол
        ('Ответственный от руководства', 1, 1, 1, 0, 0, 0),
        ('Начальник служебного наряда', 1, 1, 1, 0, 0, 0),
        ('Помощник начальника служебного наряда', 1, 1, 1, 1, 0, 0),
        ('Дежурный водитель', 1, 1, 1, 0, 0, 0),
        ('КПП-1', 1, 1, 0, 1, 1, 1),
        ('КПП-2', 1, 1, 0, 1, 0, 0),
        ('КПП-3', 1, 1, 0, 1, 1, 3),
        ('Патруль', 1, 1, 0, 1, 1, 3),
        ('Общежитие', 1, 1, 0, 1, 1, 1),
        ('Учебные корпуса', 1, 1, 0, 1, 1, 5),
        ('1-ый этаж общежития', 1, 1, 0, 1, 1, 2),
        ('2-ый этаж общежития', 1, 1, 0, 1, 1, 2),
        ('3-ый этаж общежития', 1, 1, 0, 1, 1, 2),
        ('4-ый этаж общежития', 1, 1, 0, 1, 1, 2),
        ('5-ый этаж общежития', 1, 1, 0, 1, 1, 2),
        ('Спортивный комплекс', 1, 1, 0, 1, 1, 1),
        ('Столовая', 1, 1, 0, 1, 1, 11),
        ('Изолятор', 1, 1, 0, 1, 1, 1)
    ]
    
    try:
        # Проверяем, есть ли уже данные в таблице
        результат = выполнить_запрос("SELECT COUNT(*) as count FROM посты")
        if результат and результат[0]['count'] > 0:
            logger.info("Справочник постов уже заполнен")
            return
            
        # Заполняем таблицу данными
        for пост in посты:
            выполнить_запрос(
                """INSERT INTO посты (
                    наименование, дежурный, дежурный_кол, 
                    дежурный_офицер, дежурный_курсант, 
                    дневальный, дневальный_кол
                ) VALUES (?, ?, ?, ?, ?, ?, ?)""",
                пост
            )
        logger.info("Справочник постов успешно заполнен")
    except Exception as e:
        logger.error(f"Ошибка при заполнении справочника постов: {e}")
        raise

def _заполнить_справочник_типов_нарядов():
    """Заполняет справочник типов нарядов начальными данными"""
    типы_нарядов = [
        ('Дежурный',),
        ('Дневальный',),
        ('Начальник наряда',)
    ]
    
    try:
        # Проверяем, есть ли уже данные в таблице
        результат = выполнить_запрос("SELECT COUNT(*) as count FROM типы_нарядов")
        if результат and результат[0]['count'] > 0:
            logger.info("Справочник типов нарядов уже заполнен")
            return
            
        # Заполняем таблицу данными
        for наименование in типы_нарядов:
            выполнить_запрос(
                "INSERT INTO типы_нарядов (наименование) VALUES (?)",
                наименование
            )
        logger.info("Справочник типов нарядов успешно заполнен")
    except Exception as e:
        logger.error(f"Ошибка при заполнении справочника типов нарядов: {e}")
        raise

# Выполняем проверку при импорте модуля
if __name__ == "__main__":
    проверка_создание_таблиц()
