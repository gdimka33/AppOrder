from БД_соединение import выполнить_запрос
from logger import logger

# Описание структуры таблиц базы данных
TABLES = {
    'офицеры': '''
        CREATE TABLE IF NOT EXISTS офицеры (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            имя TEXT NOT NULL,
            фамилия TEXT NOT NULL,
            отчество TEXT,
            звание_id INTEGER,
            должность_id INTEGER,
            подразделение_id INTEGER,
            состояние_сод INTEGER DEFAULT 0,
            состояние_псод INTEGER DEFAULT 0,
            FOREIGN KEY (звание_id) REFERENCES звания (id),
            FOREIGN KEY (должность_id) REFERENCES должности (id),
            FOREIGN KEY (подразделение_id) REFERENCES подразделения (id)
        )
    ''',
    
    'курсанты': '''
        CREATE TABLE IF NOT EXISTS курсанты (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            имя TEXT NOT NULL,
            фамилия TEXT NOT NULL,
            отчество TEXT,
            звание_id INTEGER,
            должность_id INTEGER,
            подразделение_id INTEGER,
            год_набора INTEGER NOT NULL,
            состояние_сод INTEGER DEFAULT 0,
            состояние_псод INTEGER DEFAULT 0,
            FOREIGN KEY (звание_id) REFERENCES звания (id),
            FOREIGN KEY (должность_id) REFERENCES должности (id),
            FOREIGN KEY (подразделение_id) REFERENCES подразделения (id)
        )
    ''',
    
    'звания': '''
        CREATE TABLE IF NOT EXISTS звания (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            наименование TEXT NOT NULL,
            категория TEXT NOT NULL,
            CONSTRAINT check_категория CHECK (категория IN ('курсант', 'офицер', 'общее'))
        )
    ''',

    'должности': '''
        CREATE TABLE IF NOT EXISTS должности (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            наименование TEXT NOT NULL,
            категория TEXT NOT NULL,
            CONSTRAINT check_категория CHECK (категория IN ('курсант', 'офицер', 'общее'))
        )
    ''',

    'подразделения': '''
        CREATE TABLE IF NOT EXISTS подразделения (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            наименование TEXT NOT NULL,
            абривиатура TEXT NOT NULL
        )
    ''',

    'история_перемещения_сотрудников': '''
        CREATE TABLE IF NOT EXISTS история_перемещения_сотрудников (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            сотрудник_id INTEGER NOT NULL,
            сотрудник_type TEXT NOT NULL,  -- 'офицер' или 'курсант'
            change_type TEXT NOT NULL,  -- 'звание' или 'должность'
            звание_id INTEGER,
            должность_id INTEGER,
            подразделение_id INTEGER,
            дата_начала DATE NOT NULL,
            дата_окончание DATE,
            FOREIGN KEY (звание_id) REFERENCES звания (звание_id),
            FOREIGN KEY (должность_id) REFERENCES должности (должность_id),
            FOREIGN KEY (подразделение_id) REFERENCES подразделения (подразделение_id)
        )
    ''',
}

def проверка_создание_таблиц():
    """Проверяет существование необходимых таблиц в базе данных и создает отсутствующие"""
    try:
        for имя_таблицы, sql_запрос in TABLES.items():
            выполнить_запрос(sql_запрос)
            logger.info(f"Проверена/создана таблица {имя_таблицы}")
        
        # Заполняем справочники начальными данными
        _заполнить_справочник_званий()
        _заполнить_справочник_должностей()
        
    except Exception as e:
        logger.error(f"Ошибка при проверке/создании таблиц: {e}")
        raise

def _заполнить_справочник_званий():
    """Заполняет справочник званий начальными данными"""
    звания = [
        # Звания для курсантов
        ('рядовой', 'курсант'),
        ('ефрейтор', 'курсант'),
        ('младший сержант', 'курсант'),
        ('сержант', 'курсант'),
        ('старший сержант', 'курсант'),
        ('старшина', 'курсант'),
        
        # Общие звания
        ('прапорщик', 'общее'),
        ('старший прапорщик', 'общее'),
        
        # Звания для офицеров
        ('младший лейтенант', 'офицер'),
        ('лейтенант', 'офицер'),
        ('старший лейтенант', 'офицер'),
        ('капитан', 'офицер'),
        ('майор', 'офицер'),
        ('подполковник', 'офицер'),
        ('полковник', 'офицер')
    ]
    
    try:
        # Очищаем таблицу перед заполнением
        выполнить_запрос("DELETE FROM звания")
        
        # Заполняем таблицу данными
        for звание, категория in звания:
            выполнить_запрос(
                "INSERT INTO звания (наименование, категория) VALUES (?, ?)",
                (звание.lower(), категория)
            )
        logger.info("Справочник званий успешно заполнен")
    except Exception as e:
        logger.error(f"Ошибка при заполнении справочника званий: {e}")
        raise

def _заполнить_справочник_должностей():
    """Заполняет справочник должностей начальными данными"""
    должности = [
        # Должности для курсантов
        ('курсант', 'курсант'),
        ('командир отделения', 'курсант'),
        ('заместитель командира взвода', 'курсант'),
        ('старшина курса', 'курсант'),
        
        # Должности для офицеров
        ('старший оперативный дежурный', 'офицер'),
        ('преподаватель', 'офицер'),
        ('старший преподаватель', 'офицер'),
        ('начальник курса', 'офицер'),
        ('начальник кафедры', 'офицер'),
        ('заместитель начальника кафедры', 'офицер'),
        ('начальник подразделения', 'офицер'),
    ]
    
    try:
        # Очищаем таблицу перед заполнением
        выполнить_запрос("DELETE FROM должности")
        
        # Заполняем таблицу данными
        for должность, категория in должности:
            выполнить_запрос(
                "INSERT INTO должности (наименование, категория) VALUES (?, ?)",
                (должность.lower(), категория)
            )
        logger.info("Справочник должностей успешно заполнен")
    except Exception as e:
        logger.error(f"Ошибка при заполнении справочника должностей: {e}")
        raise

# Выполняем проверку при импорте модуля
if __name__ == "__main__":
    проверка_создание_таблиц()
