import tkinter as tk
from tkinter import ttk
from БД_соединение import выполнить_запрос
from logger import logger
from функции import вычислить_курс
from config import НАСТРОЙКИ_ТАБЛИЦ, НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ

class ТаблицаСотрудников(ttk.Frame):
    def __init__(self, parent, тип_сотрудника):
        super().__init__(parent)
        
        self.тип_сотрудника = тип_сотрудника
        self.настройки = НАСТРОЙКИ_ТАБЛИЦ[тип_сотрудника]
        # Берем количество записей на странице из общих настроек
        self.записей_на_странице = НАСТРОЙКИ_ТАБЛИЦ['общие']['записей_на_странице']
        self.текущая_страница = 1
        self.всего_записей = 0
        
        # Создаём базовый стиль до создания виджетов
        self.создать_базовые_стили()
        # Создаем таблицу
        self.создать_таблицу()
        # Применяем стили к созданным виджетам
        self.применить_стили_к_виджетам()
        # Создаем навигацию
        self.создать_навигацию()
        # Загружаем данные
        self.загрузить_данные()
    
    def создать_таблицу(self):
        """Создание базовой структуры таблицы"""
        # Создаем фрейм для таблицы и полосы прокрутки
        self.фрейм_таблицы = ttk.Frame(self)
        self.фрейм_таблицы.pack(side="top", fill="both", expand=True)
        
        # Создаем Treeview для отображения данных с указанием стиля
        self.таблица = ttk.Treeview(
            self.фрейм_таблицы, 
            selectmode="browse",
            style="Таблица.Treeview"
        )
        
        # Добавляем полосу прокрутки
        self.scrollbar = ttk.Scrollbar(
            self.фрейм_таблицы,
            orient="vertical",
            command=self.таблица.yview,
            style="Таблица.Vertical.TScrollbar"
        )
        self.таблица.configure(yscrollcommand=self.scrollbar.set)
        
        # Настраиваем колонки
        columns = self.настройки['колонки_по_умолчанию']
        self.таблица['columns'] = columns
        
        # Устанавливаем заголовки, ширину колонок и выравнивание
        for column in columns:
            self.таблица.heading(column, text=self.настройки['заголовки'][column])
            width_settings = self.настройки['ширина_колонок'][column]
            self.таблица.column(
                column, 
                width=width_settings['width'],
                minwidth=width_settings['minwidth'],
                anchor=self._получить_якорь_выравнивания(width_settings['выравнивание'])
            )

        # Скрываем колонку с идентификатором
        self.таблица['show'] = 'headings'
        
        # Размещаем элементы в фрейме таблицы
        self.таблица.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")

    def создать_навигацию(self):
        """Создание элементов навигации"""
        # Создаем фрейм для навигации по страницам
        self.фрейм_навигации = ttk.Frame(self)
        self.фрейм_навигации.pack(side="bottom", fill="x", pady=5)
        
        # Создаем фрейм для кнопок и метки страниц, чтобы они были по центру
        фрейм_кнопок = ttk.Frame(self.фрейм_навигации)
        фрейм_кнопок.pack(side="left", expand=True)
        
        # Кнопки навигации
        self.кнопка_назад = ttk.Button(
            фрейм_кнопок, 
            text="←", 
            width=3,
            command=self.предыдущая_страница
        )
        self.метка_страницы = ttk.Label(
            фрейм_кнопок, 
            text="",
            width=18
        )
        self.кнопка_вперед = ttk.Button(
            фрейм_кнопок, 
            text="→", 
            width=3,
            command=self.следующая_страница
        )
        
        # Размещаем элементы навигации горизонтально
        self.кнопка_назад.pack(side="left", padx=5)
        self.метка_страницы.pack(side="left", padx=5)
        self.кнопка_вперед.pack(side="left", padx=5)
        
        # Создаем метку для отображения общего количества записей
        self.метка_всего = ttk.Label(
            self.фрейм_навигации,
            text="Всего: 0",
            width=15
        )
        self.метка_всего.pack(side="right", padx=10)
        
    def создать_базовые_стили(self):
        """Создание базовых стилей до создания виджетов"""
        style = ttk.Style()
        
        # Настройка стиля таблицы
        style.configure(
            "Таблица.Treeview",
            font=(
                НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['основные']['шрифт'],
                НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['основные']['размер_шрифта']
            ),
            rowheight=НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['основные']['высота_строки'],
            background=НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['строки']['чередование_цветов']['нечетная'],
            fieldbackground=НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['строки']['чередование_цветов']['нечетная']
        )
        
        # Настройка стиля заголовков
        style.configure(
            "Таблица.Treeview.Heading",
            font=(
                НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['заголовки']['шрифт'],
                НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['заголовки']['размер_шрифта'],
                'bold' if НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['заголовки']['жирный_шрифт'] else 'normal'
            ),
            background=НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['заголовки']['цвет_фона'],
            foreground=НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['заголовки']['цвет_текста']
        )
        
        # Настройка полосы прокрутки
        if НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['полоса_прокрутки']['показывать']:
            style.configure(
                "Таблица.Vertical.TScrollbar",
                background=НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['полоса_прокрутки']['стиль']['фон'],
                troughcolor=НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['полоса_прокрутки']['стиль']['цвет_полосы'],
                width=НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['полоса_прокрутки']['ширина']
            )

    def применить_стили_к_виджетам(self):
        """Применение стилей к уже созданным виджетам"""
        # Настройка при выделении
        style = ttk.Style()
        style.map(
            "Таблица.Treeview",
            background=[("selected", НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['строки']['цвет_выбора'])],
            foreground=[("selected", "#FFFFFF")]
        )
        
        # Настраиваем теги для чередования цветов строк
        self.таблица.tag_configure(
            'четная_строка',
            background=НАСТРОЙКИ_СТИЛЯ_ТАБЛИЦ['строки']['чередование_цветов']['четная']
        )
        
    def загрузить_данные(self):
        """Загружает данные из базы"""
        try:
            таблица = 'курсанты' if self.тип_сотрудника == 'курсант' else 'офицеры'
            
            # Получаем общее количество записей
            запрос_count = f"SELECT COUNT(*) FROM {таблица}"
            результат_count = выполнить_запрос(запрос_count)
            self.всего_записей = результат_count[0][0] if результат_count else 0
            
            # Вычисляем смещение для текущей страницы
            offset = (self.текущая_страница - 1) * self.записей_на_странице
            
            # Формируем SQL запрос в зависимости от типа сотрудника
            if self.тип_сотрудника == 'курсант':
                запрос = f"""
                    SELECT 
                        o.фамилия,
                        o.имя,
                        o.отчество,
                        z.наименование as звание,
                        d.наименование as должность,
                        o.год_набора,  -- Добавлено
                        CASE WHEN o.состояние_псод = 0 THEN '' ELSE CAST(o.состояние_псод AS TEXT) END as псод
                    FROM {таблица} o
                    LEFT JOIN звания z ON o.звание_id = z.id
                    LEFT JOIN должности d ON o.должность_id = d.id
                    ORDER BY o.фамилия, o.имя
                    LIMIT {self.записей_на_странице} OFFSET {offset}
                """
            else:
                запрос = f"""
                    SELECT 
                        o.фамилия,
                        o.имя,
                        o.отчество,
                        z.наименование as звание,
                        d.наименование as должность,
                        p.наименование as подразделение,
                        o.состояние_сод as сод,
                        CASE WHEN o.состояние_псод = 0 THEN '' ELSE CAST(o.состояние_псод AS TEXT) END as псод
                    FROM {таблица} o
                    LEFT JOIN звания z ON o.звание_id = z.id
                    LEFT JOIN должности d ON o.должность_id = d.id
                    LEFT JOIN подразделения p ON o.подразделение_id = p.id
                    ORDER BY o.фамилия, o.имя
                    LIMIT {self.записей_на_странице} OFFSET {offset}
                """
            
            результат = выполнить_запрос(запрос)
            
            # Очищаем существующие данные
            for item in self.таблица.get_children():
                self.таблица.delete(item)
            
            # Добавляем новые данные и форматируем их
            данные = []
            for row in результат:
                # Формируем ФИО в формате "Иванов И.М."
                фио = f"{row['фамилия'].capitalize()} {row['имя'][0].upper()}."
                if row['отчество']:
                    фио += f"{row['отчество'][0].upper()}."
                
                # Вычисляем курс
                курс = вычислить_курс(row['год_набора']) if self.тип_сотрудника == 'курсант' else ""
                
                # Формируем значения для вставки в таблицу
                values = [фио]
                if self.тип_сотрудника == 'курсант':
                    values.extend([
                        row['звание'].capitalize(), 
                        курс, 
                        row['год_набора'],  # Добавляем год набора
                        row['должность'].capitalize(), 
                        row['псод']
                    ])
                else:
                    for column in self.таблица['columns'][1:]:
                        value = row[column]
                        if column in ('звание', 'должность', 'подразделение') and value:
                            value = value.capitalize()
                        values.append(value)
                
                данные.append(values)
            
            # Пример добавления данных с чередованием цветов
            for i, row in enumerate(данные):
                тег = 'четная_строка' if i % 2 == 0 else ''
                self.таблица.insert('', 'end', values=row, tags=(тег,))
            
            # Обновляем информацию о страницах
            всего_страниц = (self.всего_записей + self.записей_на_странице - 1) // self.записей_на_странице
            self.метка_страницы.configure(text=f"Страница {self.текущая_страница} из {всего_страниц}")
            self.метка_всего.configure(text=f"Всего: {self.всего_записей}")

            # Обновляем состояние кнопок навигации
            self.кнопка_назад["state"] = "normal" if self.текущая_страница > 1 else "disabled"
            self.кнопка_вперед["state"] = "normal" if self.текущая_страница < всего_страниц else "disabled"
                
        except Exception as e:
            logger.error(f"Ошибка при загрузке данных: {e}")
            
    def следующая_страница(self):
        """Переход на следующую страницу"""
        self.текущая_страница += 1
        self.загрузить_данные()
        
    def предыдущая_страница(self):
        """Переход на предыдущую страницу"""
        if self.текущая_страница > 1:
            self.текущая_страница -= 1
            self.загрузить_данные()

    def _получить_якорь_выравнивания(self, выравнивание):
        """Преобразует текстовое описание выравнивания в якорь ttk"""
        якоря = {
            'left': 'w',    # west
            'center': 'center',
            'right': 'e'    # east
        }
        return якоря.get(выравнивание, 'center')  # по умолчанию center