import tkinter as tk
from tkinter import ttk
from БД_соединение import выполнить_запрос
from logger import logger

class ВиджетПодразделения(ttk.Combobox):
    """
    Виджет для выбора подразделения из выпадающего списка.
    Отображает все доступные подразделения.
    """
    def __init__(self, родитель, **kwargs):
        """
        Инициализация виджета выбора подразделения
        
        Args:
            родитель: Родительский виджет
            **kwargs: Дополнительные параметры для ttk.Combobox
        """
        # Устанавливаем параметры по умолчанию
        kwargs.setdefault('state', 'readonly')
        kwargs.setdefault('width', 30)
        
        # Инициализируем список подразделений до создания виджета
        self.подразделения = self._получить_подразделения_из_бд()
        
        # Заполняем значения для выпадающего списка
        значения = [подразделение[1] for подразделение in self.подразделения]
        kwargs['values'] = значения
        
        super().__init__(родитель, **kwargs)
        
        # Устанавливаем первое значение по умолчанию, если есть значения
        # if значения:
        #     self.current(0)
        
        # Настраиваем отображение выпадающего списка без прокрутки
        self.bind('<<ComboboxSelected>>', self._обработать_выбор)
        self.bind('<Button-1>', self._настроить_выпадающий_список)
        
        # Сразу настраиваем высоту выпадающего списка
        if значения:
            self.configure(height=len(значения))
    
    def _получить_подразделения_из_бд(self):
        """Получает подразделения из базы данных"""
        try:
            запрос = """
                SELECT id, наименование 
                FROM подразделения 
                ORDER BY наименование ASC
            """
            
            результат = выполнить_запрос(запрос)
            
            if результат:
                return [(строка['id'], строка['наименование']) for строка in результат]
            else:
                logger.warning("Не найдены подразделения в базе данных")
                return []
        
        except Exception as e:
            logger.error(f"Ошибка при загрузке подразделений: {e}")
            print(f"Ошибка при загрузке подразделений: {e}")  # Добавляем вывод в консоль для отладки
            return []
    
    def _загрузить_подразделения(self):
        """Загружает подразделения из базы данных и обновляет выпадающий список"""
        self.подразделения = self._получить_подразделения_из_бд()
        
        # Заполняем выпадающий список наименованиями подразделений
        значения = [подразделение[1] for подразделение in self.подразделения]
        self['values'] = значения
        
        # Устанавливаем первое значение по умолчанию, если есть значения
        if значения:
            self.current(0)
    
    def _настроить_выпадающий_список(self, event=None):
        """Настраивает выпадающий список, чтобы он отображался без прокрутки"""
        self.update()
        if not self['values']:
            return
            
        # Получаем количество элементов в списке
        количество_элементов = len(self['values'])
        
        # Ограничиваем высоту выпадающего списка до 10 элементов максимум
        # для более удобной навигации при большом количестве элементов
        высота = min(количество_элементов, 10)
        
        # Устанавливаем высоту выпадающего списка
        self.configure(height=высота)

        # Удаляем дублирующий код ниже, который переопределяет высоту
        # количество_элементов = len(self['values'])
        # self.configure(height=количество_элементов)
    
    def _обработать_выбор(self, event=None):
        """Обрабатывает выбор подразделения из списка"""
        # Можно добавить дополнительную логику при выборе подразделения
        pass
    
    def get_id(self):
        """Возвращает ID выбранного подразделения"""
        текущее_значение = self.get()
        for id_подразделения, наименование in self.подразделения:
            if наименование == текущее_значение:
                return id_подразделения
        return None
    
    def set_by_id(self, id_подразделения):
        """Устанавливает значение по ID подразделения"""
        for i, (подразделение_id, наименование) in enumerate(self.подразделения):
            if подразделение_id == id_подразделения:
                self.current(i)
                return True
        return False

if __name__ == "__main__":
    # Пример использования класса ВиджетПодразделения
    root = tk.Tk()
    root.title("Выбор подразделения")

    # Создаем экземпляр виджета
    виджет = ВиджетПодразделения(root)
    виджет.pack()

    root.mainloop()