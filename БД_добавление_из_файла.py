import pandas as pd
from БД_соединение import выполнить_запрос
from logger import logger
import os
import logging

# Настраиваем логирование отсутствующих записей
отсутствующие_записи_logger = logging.getLogger("отсутствующие_записи")
отсутствующие_записи_handler = logging.FileHandler("отсутствующие_записи.log", mode="w", encoding="utf-8")
отсутствующие_записи_handler.setFormatter(logging.Formatter("%(asctime)s - %(message)s"))
отсутствующие_записи_logger.addHandler(отсутствующие_записи_handler)
отсутствующие_записи_logger.setLevel(logging.INFO)

def обработать_фио(фио_строка):
    """
    Разбивает строку ФИО на составляющие и приводит к нижнему регистру
    
    Args:
        фио_строка (str): строка с ФИО в формате 'Фамилия Имя Отчество'
    Returns:
        tuple: (фамилия, имя, отчество)
    """
    try:
        # Разбиваем строку по пробелам
        части = фио_строка.strip().lower().split()
        
        # Первые два элемента - это всегда фамилия и имя
        фамилия = части[0]
        имя = части[1]
        
        # Все оставшиеся части - это отчество (может быть составным)
        отчество = ' '.join(части[2:]) if len(части) > 2 else ''
        
        return фамилия, имя, отчество
    except Exception as e:
        logger.error(f"Ошибка при обработке ФИО '{фио_строка}': {e}")
        return фио_строка, '', ''

def получить_запись(таблица, наименование):
    """
    Получает ID записи из справочной таблицы
    """
    наименование = наименование.strip().lower()
    sql_select = f"SELECT id FROM {таблица} WHERE наименование = :наименование"
    результат = выполнить_запрос(sql_select, {'наименование': наименование})
    return результат[0][0] if результат else None

def определить_категорию_звания(звание, тип_сотрудника):
    """
    Определяет категорию звания на основе типа сотрудника
    
    Args:
        звание (str): наименование звания
        тип_сотрудника (str): 'курсант' или 'офицер'
    Returns:
        str: категория звания ('курсант', 'офицер', 'общее')
    """
    if тип_сотрудника == 'курсант':
        return 'курсант'
    elif тип_сотрудника == 'офицер':
        return 'офицер'
    else:
        return 'общее'

def добавить_из_файла(тип_сотрудника, путь_к_файлу):
    """
    Добавляет данные из Excel файла в базу данных
    """
    try:
        # Проверяем существование файла
        if not os.path.exists(путь_к_файлу):
            logger.error(f"Файл не найден: {путь_к_файлу}")
            return False, "Файл не найден"

        # Читаем Excel файл
        try:
            excel = pd.read_excel(путь_к_файлу, sheet_name=0)
            if excel.empty:
                logger.error("Excel файл пуст")
                return False, "Excel файл не содержит данных"
                
            logger.debug(f"Прочитан файл Excel. Столбцы: {list(excel.columns)}")
            df = excel
            
        except Exception as e:
            logger.error(f"Ошибка при чтении Excel файла: {str(e)}")
            return False, f"Не удалось прочитать файл Excel: {str(e)}"

        # Проверяем наличие необходимых столбцов
        нужные_столбцы = ['ФИО', 'Звание', 'Должность']
        if тип_сотрудника == 'курсант':
            нужные_столбцы.append('Год набора')
        else:
            нужные_столбцы.append('Подразделение')
            
        отсутствующие_столбцы = [столбец for столбец in нужные_столбцы if столбец not in df.columns]
        if отсутствующие_столбцы:
            сообщение = (f"В таблице отсутствуют следующие столбцы:\n"
                        f"{', '.join(отсутствующие_столбцы)}\n\n"
                        f"Требуются столбцы:\n{', '.join(нужные_столбцы)}")
            logger.error(f"Отсутствуют обязательные столбцы: {отсутствующие_столбцы}")
            return False, сообщение

        # Получаем списки существующих записей из БД
        try:
            рез_звания = выполнить_запрос("SELECT наименование FROM звания")
            logger.debug(f"Результат запроса к таблице 'звания': {рез_звания}")
            if not isinstance(рез_звания, list) or not all(isinstance(row, dict) and 'наименование' in row for row in рез_звания):
                raise KeyError("Результат запроса к таблице 'звания' имеет некорректный формат")
            if not рез_звания:
                logger.error("Справочник званий пуст")
                return False, "Справочник званий пуст. Заполните справочник званий перед загрузкой данных."

            рез_должности = выполнить_запрос("SELECT наименование FROM должности")
            logger.debug(f"Результат запроса к таблице 'должности': {рез_должности}")
            if not isinstance(рез_должности, list) or not all(isinstance(row, dict) and 'наименование' in row for row in рез_должности):
                raise KeyError("Результат запроса к таблице 'должности' имеет некорректный формат")
            if not рез_должности:
                logger.error("Справочник должностей пуст")
                return False, "Справочник должностей пуст. Заполните справочник должностей перед загрузкой данных."

            if тип_сотрудника == 'офицер':
                рез_подразделения = выполнить_запрос("SELECT наименование FROM подразделения")
                logger.debug(f"Результат запроса к таблице 'подразделения': {рез_подразделения}")
                if not isinstance(рез_подразделения, list) or not all(isinstance(row, dict) and 'наименование' in row for row in рез_подразделения):
                    raise KeyError("Результат запроса к таблице 'подразделения' имеет некорректный формат")
                if not рез_подразделения:
                    logger.error("Справочник подразделений пуст")
                    return False, "Справочник подразделений пуст. Заполните справочник подразделений перед загрузкой данных."
            else:
                рез_подразделения = []
            
            существующие_звания = {row['наименование'].lower() for row in рез_звания}
            существующие_должности = {row['наименование'].lower() for row in рез_должности}
            существующие_подразделения = {row['наименование'].lower() for row in рез_подразделения} if рез_подразделения else set()
            
            logger.debug(f"Загружены справочники из БД: {len(существующие_звания)} званий, {len(существующие_должности)} должностей, {len(существующие_подразделения)} подразделений")
        except KeyError as e:
            logger.error(f"Ошибка структуры данных при получении справочников: {str(e)}")
            return False, f"Ошибка структуры данных при проверке справочников: {str(e)}"
        except Exception as e:
            logger.error(f"Ошибка при получении справочников: {str(e)}, тип ошибки: {type(e)}")
            return False, f"Ошибка при проверке справочников: {str(e)}"

        # Формируем SQL запрос в зависимости от типа сотрудника
        if тип_сотрудника == 'курсант':
            таблица = 'курсанты'
            sql = """INSERT INTO курсанты (фамилия, имя, отчество, звание_id, год_набора, должность_id) 
                    VALUES (:фамилия, :имя, :отчество, :звание_id, :год_набора, :должность_id)"""
        else:
            таблица = 'офицеры'
            sql = """INSERT INTO офицеры (фамилия, имя, отчество, звание_id, должность_id, подразделение_id) 
                    VALUES (:фамилия, :имя, :отчество, :звание_id, :должность_id, :подразделение_id)"""
        
        # Добавляем каждую строку в базу
        успешно_добавлено = 0
        for idx, row in df.iterrows():
            try:
                # Логируем текущую строку для отладки
                logger.debug(f"Обработка строки {idx + 2}: {dict(row)}")
                
                # Проверяем наличие данных
                if pd.isna(row['ФИО']) or str(row['ФИО']).strip() == '':
                    logger.error(f"Пустое значение ФИО в строке {idx + 2}")
                    continue
                    
                if pd.isna(row['Звание']) or str(row['Звание']).strip() == '':
                    logger.error(f"Пустое значение Звание в строке {idx + 2}")
                    continue
                    
                # Проверяем наличие звания в справочнике
                звание = str(row['Звание']).strip().lower()
                звание_id = выполнить_запрос(
                    "SELECT id FROM звания WHERE наименование = ?", (звание,)
                )
                if not звание_id:
                    logger.error(f"Звание '{звание}' отсутствует в справочнике. Строка {idx + 2} пропущена")
                    continue

                if pd.isna(row['Должность']) or str(row['Должность']).strip() == '':
                    logger.error(f"Пустое значение Должность в строке {idx + 2}")
                    continue
                    
                # Проверяем наличие должности в справочнике
                должность = str(row['Должность']).strip().lower()
                должность_id = выполнить_запрос(
                    "SELECT id FROM должности WHERE наименование = ?", (должность,)
                )
                if not должность_id:
                    logger.error(f"Должность '{должность}' отсутствует в справочнике. Строка {idx + 2} пропущена")
                    continue

                if тип_сотрудника == 'курсант':
                    if pd.isna(row['Год набора']):
                        logger.error(f"Пустое значение Год набора в строке {idx + 2}")
                        continue
                else:
                    if pd.isna(row['Подразделение']) or str(row['Подразделение']).strip() == '':
                        logger.error(f"Пустое значение Подразделение в строке {idx + 2}")
                        continue

                    # Проверяем наличие подразделения в справочнике
                    подразделение = str(row['Подразделение']).strip().lower()
                    подразделение_id = выполнить_запрос(
                        "SELECT id FROM подразделения WHERE наименование = ?", (подразделение,)
                    )
                    if not подразделение_id:
                        logger.error(f"Подразделение '{подразделение}' отсутствует в справочнике. Строка {idx + 2} пропущена")
                        continue

                # Разбиваем ФИО на составляющие
                фамилия, имя, отчество = обработать_фио(str(row['ФИО']))
                
                # Формируем данные для вставки
                данные = {
                    'фамилия': фамилия,
                    'имя': имя,
                    'отчество': отчество,
                    'звание_id': звание_id[0]['id'],
                    'должность_id': должность_id[0]['id']
                }
                
                if тип_сотрудника == 'курсант':
                    данные['год_набора'] = int(row['Год набора'])
                else:
                    данные['подразделение_id'] = подразделение_id[0]['id']
                
                # Выполняем вставку данных
                выполнить_запрос(sql, данные)
                успешно_добавлено += 1
                
            except Exception as e:
                подробная_ошибка = f"Ошибка при обработке строки {idx + 2}: {str(e)}"
                logger.error(подробная_ошибка)
                отсутствующие_записи_logger.info(f"Ошибка строки {idx + 2}: {подробная_ошибка}")
                continue  # Продолжаем со следующей строкой вместо raise
                
        if успешно_добавлено == 0:
            return False, "Не удалось добавить ни одной записи"
            
        logger.info(f"Добавлено {успешно_добавлено} записей в таблицу {таблица}")
        return True, f"Успешно добавлено {успешно_добавлено} записей"
        
    except pd.errors.EmptyDataError:
        сообщение = "Выбранный файл пуст или не содержит данных"
        logger.error(сообщение)
        return False, сообщение
    except Exception as e:
        подробная_ошибка = f"Непредвиденная ошибка при обработке файла: {str(e)}"
        logger.error(подробная_ошибка)
        return False, подробная_ошибка