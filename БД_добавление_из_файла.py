import pandas as pd
from БД_соединение import выполнить_запрос
from logger import logger

def обработать_фио(фио_строка):
    """
    Разбивает строку ФИО на составляющие и приводит к нижнему регистру
    
    Args:
        фио_строка (str): строка с ФИО в формате 'Фамилия Имя Отчество'
    Returns:
        tuple: (фамилия, имя, отчество)
    """
    try:
        # Разбиваем строку по пробелам
        части = фио_строка.strip().lower().split()
        
        # Первые два элемента - это всегда фамилия и имя
        фамилия = части[0]
        имя = части[1]
        
        # Все оставшиеся части - это отчество (может быть составным)
        отчество = ' '.join(части[2:]) if len(части) > 2 else ''
        
        return фамилия, имя, отчество
    except Exception as e:
        logger.error(f"Ошибка при обработке ФИО '{фио_строка}': {e}")
        return фио_строка, '', ''

def получить_или_создать_запись(таблица, наименование):
    """
    Получает ID записи из справочной таблицы или создает новую
    """
    наименование = наименование.strip().lower()
    
    # Пробуем найти существующую запись
    sql_select = f"SELECT id FROM {таблица} WHERE наименование = :наименование"
    результат = выполнить_запрос(sql_select, {'наименование': наименование})
    
    if результат:
        return результат[0][0]
    
    # Если записи нет, создаем новую
    sql_insert = f"INSERT INTO {таблица} (наименование) VALUES (:наименование)"
    выполнить_запрос(sql_insert, {'наименование': наименование})
    
    # Получаем ID новой записи
    результат = выполнить_запрос(sql_select, {'наименование': наименование})
    return результат[0][0]

def ДобавлениеИзФайла(тип_сотрудника, путь_к_файлу):
    """
    Добавляет данные из Excel файла в базу данных
    
    Args:
        тип_сотрудника (str): 'курсант' или 'офицер'
        путь_к_файлу (str): путь к Excel файлу
    
    Returns:
        tuple: (успех: bool, сообщение: str)
    """
    try:
        # Читаем Excel файл
        xlsx = pd.ExcelFile(путь_к_файлу)
        df = None
        таблица = 'курсанты' if тип_сотрудника == 'курсант' else 'офицеры'
        
        # Пробуем прочитать данные из умной таблицы
        try:
            df = pd.read_excel(путь_к_файлу, sheet_name=0)
        except Exception as e:
            logger.error(f"Ошибка при чтении файла: {e}")
            return False, "Ошибка при чтении файла Excel"

        # Проверяем наличие необходимых столбцов
        нужные_столбцы = ['ФИО', 'Звание', 'Должность']
        if тип_сотрудника == 'курсант':
            нужные_столбцы.append('Год набора')
        else:
            нужные_столбцы.append('Подразделение')
            
        # Проверяем наличие всех нужных столбцов
        отсутствующие_столбцы = [столбец for столбец in нужные_столбцы if столбец not in df.columns]
        if отсутствующие_столбцы:
            сообщение = (f"В таблице отсутствуют следующие столбцы:\n"
                        f"{', '.join(отсутствующие_столбцы)}\n\n"
                        f"Требуются столбцы:\n{', '.join(нужные_столбцы)}")
            return False, сообщение

        # Формируем SQL запрос в зависимости от типа сотрудника
        if тип_сотрудника == 'курсант':
            sql = """INSERT INTO курсанты (фамилия, имя, отчество, звание_id, год_набора, должность_id) 
                    VALUES (:фамилия, :имя, :отчество, :звание_id, :год_набора, :должность_id)"""
        else:
            sql = """INSERT INTO офицеры (фамилия, имя, отчество, звание_id, должность_id, подразделение_id) 
                    VALUES (:фамилия, :имя, :отчество, :звание_id, :должность_id, :подразделение_id)"""
        
        # Добавляем каждую строку в базу
        for _, row in df.iterrows():
            try:
                # Разбиваем ФИО на составляющие
                фамилия, имя, отчество = обработать_фио(row['ФИО'])
                
                # Получаем или создаем записи в справочниках
                звание_id = получить_или_создать_запись('звания', str(row['Звание']))
                должность_id = получить_или_создать_запись('должности', str(row['Должность']))
                
                данные = {
                    'фамилия': фамилия,
                    'имя': имя,
                    'отчество': отчество,
                    'звание_id': звание_id,
                    'должность_id': должность_id
                }
                
                if тип_сотрудника == 'курсант':
                    данные['год_набора'] = row['Год набора']
                else:
                    подразделение_id = получить_или_создать_запись('подразделения', str(row['Подразделение']))
                    данные['подразделение_id'] = подразделение_id
                
                выполнить_запрос(sql, данные)
                
            except Exception as e:
                logger.error(f"Ошибка при обработке строки данных: {e}")
                raise
                
        количество_записей = len(df)
        logger.info(f"Добавлено {количество_записей} записей в таблицу {таблица}")
        return True, f"Успешно добавлено {количество_записей} записей"
        
    except pd.errors.EmptyDataError:
        сообщение = "Выбранный файл пуст или не содержит данных"
        logger.error(сообщение)
        return False, сообщение
    except Exception as e:
        logger.error(f"Ошибка при добавлении данных из файла: {e}")
        return False, f"Ошибка при добавлении данных: {str(e)}"