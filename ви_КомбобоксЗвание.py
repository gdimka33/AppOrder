import tkinter as tk
from tkinter import ttk
from БД_соединение import выполнить_запрос
from logger import logger

class ВиджетЗвания(ttk.Combobox):
    """
    Виджет для выбора звания из выпадающего списка.
    Отображает звания в зависимости от типа сотрудника (офицер/курсант).
    Звания сортируются от младшего к старшему.
    """
    def __init__(self, родитель, тип_сотрудника, **kwargs):
        """
        Инициализация виджета выбора звания
        
        Args:
            родитель: Родительский виджет
            тип_сотрудника: Тип сотрудника ('офицер' или 'курсант')
            **kwargs: Дополнительные параметры для ttk.Combobox
        """
        # Устанавливаем параметры по умолчанию
        kwargs.setdefault('state', 'readonly')
        kwargs.setdefault('width', 30)
        
        # Инициализируем список званий до создания виджета
        self.тип_сотрудника = тип_сотрудника
        self.звания = self._получить_звания_из_бд()
        
        # Заполняем значения для выпадающего списка
        значения = [звание[1] for звание in self.звания]
        kwargs['values'] = значения
        
        super().__init__(родитель, **kwargs)
        
        # Устанавливаем первое значение по умолчанию, если есть значения
        # if значения:
        #     self.current(0)
        
        # Настраиваем отображение выпадающего списка без прокрутки
        self.bind('<<ComboboxSelected>>', self._обработать_выбор)
        self.bind('<Button-1>', self._настроить_выпадающий_список)
        
        # Сразу настраиваем высоту выпадающего списка
        if значения:
            высота = min(len(значения), 10)
            self.configure(height=высота)
    
    def _получить_звания_из_бд(self):
        """Получает звания из базы данных в зависимости от типа сотрудника"""
        try:
            условие = ""
            if self.тип_сотрудника == "офицер":
                условие = "категория IN ('офицер', 'общее')"  # Звания для офицеров и общие
            elif self.тип_сотрудника == "курсант":
                условие = "категория IN ('курсант', 'общее')"  # Звания для курсантов и общие
            else:
                условие = "1=1"  # Все звания
            
            запрос = f"""
                SELECT id, наименование 
                FROM звания 
                WHERE {условие}
                ORDER BY id ASC
            """
            
            результат = выполнить_запрос(запрос)
            
            if результат:
                return [(строка['id'], строка['наименование']) for строка in результат]
            else:
                logger.warning(f"Не найдены звания для типа сотрудника: {self.тип_сотрудника}")
                return []
        
        except Exception as e:
            logger.error(f"Ошибка при загрузке званий: {e}")
            print(f"Ошибка при загрузке званий: {e}")  # Добавляем вывод в консоль для отладки
            return []
    
    def _загрузить_звания(self):
        """Загружает звания из базы данных и обновляет выпадающий список"""
        self.звания = self._получить_звания_из_бд()
        
        # Заполняем выпадающий список наименованиями званий
        значения = [звание[1] for звание in self.звания]
        self['values'] = значения
        
        # Устанавливаем первое значение по умолчанию, если есть значения
        # if значения:
        #     self.current(0)
    
    def _настроить_выпадающий_список(self, event=None):
        """Настраивает выпадающий список, чтобы он отображался с ограниченной высотой"""
        self.update()
        if not self['values']:
            return
            
        # Получаем количество элементов в списке
        количество_элементов = len(self['values'])
        
        # Ограничиваем высоту выпадающего списка до 10 элементов максимум
        высота = min(количество_элементов, 10)
        
        # Устанавливаем высоту выпадающего списка
        self.configure(height=высота)
            
        # Получаем количество элементов в списке
        количество_элементов = len(self['values'])
        
        # Устанавливаем высоту выпадающего списка, чтобы отображались все элементы без прокрутки
        self.configure(height=количество_элементов)
    
    def _обработать_выбор(self, event=None):
        """Обрабатывает выбор звания из списка"""
        # Можно добавить дополнительную логику при выборе звания
        pass
    
    def get_id(self):
        """Возвращает ID выбранного звания"""
        текущее_значение = self.get()
        for id_звания, наименование in self.звания:
            if наименование == текущее_значение:
                return id_звания
        return None
    
    def set_by_id(self, id_звания):
        """Устанавливает значение по ID звания"""
        for i, (звание_id, наименование) in enumerate(self.звания):
            if звание_id == id_звания:
                self.current(i)
                return True
        return False